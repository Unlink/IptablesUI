name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Test application startup
      run: |
        timeout 10s python app.py || [ $? -eq 124 ]  # 124 is timeout exit code

  docker-test:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: iptablesui:test

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name test-container --privileged -p 8080:8080 iptablesui:test
        
        # Wait for container to start
        sleep 10
        
        # Test if application is responding
        curl -f http://localhost:8080/login || exit 1
        
        # Check container logs
        docker logs test-container
        
        # Cleanup
        docker stop test-container
        docker rm test-container